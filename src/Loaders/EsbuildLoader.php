<?php

namespace Brace\SpaServe\Loaders;

use Brace\SpaServe\SpaStaticFileServerMw;
use Psr\Http\Message\ResponseInterface;

class EsbuildLoader implements SpaServeLoader
{

    public function __construct(
        private string       $path,

        private string      $entrypoint,
        private string      $contentType,
        private string      $cwd,

        /**
         * Create a _autoload.ts file whitin entrypoint directrory containing imports found in these files
         *
         * e.g. "./pages/*.ts" will import all files in pages directory
         *
         * @var string|null
         */
        private string|null $autoloadPath = null,
        private string      $autoloadPreg = "/@route\(/im",
        private bool        $minify = false,
        private bool        $showWarnings = true
    ) {

    }


    public function matchesRoute(string $path): bool
    {
        return $path === $this->path;
    }

    /**
     * Update the _autoload.ts file
     *
     * This file contains all modules with routes.
     *
     * @return void
     */
    protected function updateAutoload() {
        if ($this->autoloadPath === null)
            return;


        // Module root path. This is the path where the entrypoint is located
        $modpath = realpath($this->cwd . "/" . dirname($this->entrypoint));
        if ($modpath === false)
            throw new \InvalidArgumentException("Unable to find module path for '{$this->entrypoint}'");

        $autoload = "/* Autogenerated by EsbuildLoader - do not change! */\n";
        $foundFiles = 0;
        $foundImports = 0;
        foreach (glob($modpath . "/" . $this->autoloadPath) as $file) {
            $foundFiles++;
            $data = file_get_contents($file);
            if (preg_match($this->autoloadPreg, $data) === 0)
                continue;
            $file = str_replace($modpath . "/", "", $file);
            $autoload .= "import './" . $file . "';\n";
            $foundImports++;
        }
        if ($foundFiles === 0)
            throw new \InvalidArgumentException("Unable to find any files matching '{$this->autoloadPath}' in directory '{$this->cwd}'");
        if ($foundImports === 0)
            throw new \InvalidArgumentException("Unable to find any imports matching '{$this->autoloadPreg}' in directory '{$this->cwd}'");
        $outfile = $modpath . "/_autoload.ts";
        if ( ! file_put_contents($outfile, $autoload))
            throw new \InvalidArgumentException("Unable to write _autoload.ts file in directory '{$this->cwd}'");
    }


    public function getResponse(string $path, SpaStaticFileServerMw $middleware): ResponseInterface
    {
        $cwd = getcwd();
        chdir($this->cwd);

        $options = "";
        if ($this->minify)
            $options .= " --minify ";


        $this->updateAutoload();


        $proc = phore_proc("esbuild :entrypoint --bundle $options", ["entrypoint" => $this->entrypoint]);
        $result = $proc->exec()->wait(false);

        $response = "";
        if ($result->failed()) {
            $response = "alert(`SpoServe Esbuild Loader Error: " . addslashes($result->getSTDERRContents()) . "`);";
        }
        if ($result->getSTDERRContents() !== "" && $this->showWarnings) {
            $response = "alert(`SpoServe Esbuild Loader Warning: " . addslashes($result->getSTDERRContents()) . "`);";
        }
        $response .= $result->getSTDOUTContents();
        chdir($cwd); // Reset CWD to original

        return $middleware->app->responseFactory->createResponseWithBody(
            $response,
            200,
            ["Content-Type" => $this->contentType]
        );
    }
}
